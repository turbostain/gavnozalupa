





























































































































local GetService = setmetatable({}, {
	__index = function(self, key)
		return game:GetService(key)
	end
})






local Script = {
Version = "",
Name = "immamantium"
}

local Settings = {
Prediction_Settings = {
    AutoSettings = true,
    Prediction = 0.165
},

Aimbot = {
    Enabled = false,
    Aiming = false,
    FOV = {
        Enabled = false,
        Size = 100,
        Round = 100,
        Color = Color3.fromRGB(28, 56, 139),
        Shape = "Custom",
        Filled = false,
        Transparency = 0.5
    },
    Hitbox = "Head",
    Nearest = "Mouse",
    VisibleCheck = false,
    IgnoreFOV = false,
},
SilentAim = {
    Enabled = false,
    WallCheck = false,
    FOV = {
        Enabled = false,
        Size = 100,
        Round = 100,
        Color = Color3.fromRGB(28, 56, 139),
        Shape = "Custom",
        Filled = false,
        Transparency = 0.5
    },
    Hitbox = {"HumanoidRootPart"},
    Nearest = "Mouse",
    Mode = "Insane",
    VisibleCheck = false,
    IgnoreFOV = false,
    LookAt = false,
},
Triggerbot = {
    Enabled = false,
    Delay = {
        Enabled = false,
        Value = 0
    }
},

Whitelist = {
    Players = {},
    Friends = {},
    Holder = "",
    Enabled = false,
    CrewEnabled = false,
    FriendsWhitelist = false
},
Movement = {
    CFrameSpeed = false,
    Toggled = falsewd,
    Type = "Render"
},

ServerCrash = {
    Enabled = false,
    Value = 0
},
God = {
    GodBullet = false,
    GodMelee = false,
    AntiRagdoll = false,
    IsStillAlive = false
},
Target = {
    Enabled = false,
    TargetUser = nil,
    WallCheck = false
}
}
local sky = "Purple Nebula"
local oldskybox
local macroangle = 0
local fakemacro = false
local jitterammount = 45
local fakemacroed = false
local macroamount = 100
skyboxchanger = false
local Skyboxes = {
    ["Purple Nebula"] = {
        ["SkyboxBk"] = "rbxassetid://159454299",
        ["SkyboxDn"] = "rbxassetid://159454296",
        ["SkyboxFt"] = "rbxassetid://159454293",
        ["SkyboxLf"] = "rbxassetid://159454286",
        ["SkyboxRt"] = "rbxassetid://159454300",
        ["SkyboxUp"] = "rbxassetid://159454288"
    },
    ["Night Sky"] = {
        ["SkyboxBk"] = "rbxassetid://12064107",
        ["SkyboxDn"] = "rbxassetid://12064152",
        ["SkyboxFt"] = "rbxassetid://12064121",
        ["SkyboxLf"] = "rbxassetid://12063984",
        ["SkyboxRt"] = "rbxassetid://12064115",
        ["SkyboxUp"] = "rbxassetid://12064131"
    },
    ["Redshift"] = {
        ["SkyboxBk"] = "rbxassetid://401664839",
        ["SkyboxDn"] = "rbxassetid://401664862",
        ["SkyboxFt"] = "rbxassetid://401664960",
        ["SkyboxLf"] = "rbxassetid://401664881",
        ["SkyboxRt"] = "rbxassetid://401664901",
        ["SkyboxUp"] = "rbxassetid://401664936"
    }
}
aimssist = false
aimvelocity = 0.1
local Plr
targetcha = false
packed = false
autopeek = false
local resolverenabled = false
local resolverpred = 0.16
AntiAim1 = false
AntiAim2 = false
Antilock = false
local antilocktoggled = false
antimul = -0.2
velocitybreaker = false
ejebag = false
lagswitch = false
antihei = 5
local uitoggle = true
randomhitbox = true
notifi = true
AUTOPEEK = false
hideuser = false
removebar = false
forceonkey = false
strafejump = false
hideleader = false
pitch = "Sky"
leftvis = true
local prediction2 = 0.165
rightvis = true
local freefallhitbox = "Head"
topvis = true
local antistomp = false
downtvis = true
local placemarker = Instance.new("Part", game.Workspace)
placemarker.Anchored = true
placemarker.CanCollide = false
placemarker.Size = Vector3.new(11, 8, 11)
local filledboxestrans = 0.15
placemarker.Transparency = 0.75
targetchams = false
local motionblur = false
local blursize = 200
crosscolor = Color3.fromRGB(255,255,255)
espcolors = {
boxcolor = Color3.fromRGB(255,255,255),
box2color = Color3.fromRGB(255,255,255),
healthcolor = Color3.fromRGB(0,255,0),
namecolor = Color3.fromRGB(255,255,255),
toolcolor = Color3.fromRGB(255,255,255),
outlinecolor = Color3.fromRGB(0,0,0),
crosshaircolor = Color3.fromRGB(255,255,255),
distance = 120,
textsize = 13
}
TargetStrafe = false
espenabled = false
local enabled = falseWD
local enabled2 = falseWD
local i = 0
PRED = 34
VELOHIp = 4.5
CFRAMEE = -0.420
Targetdis = 5
Targetspeed = 50 * 400
boxes = false
boxes2 = false
antibag = false
weapon = false
health = false
healthnumber = false
displaynames = false
walltransparency = 0.5
timechanger = false
removeleaderboard = false
timeamount = 10
cameramode = false
cameravelo = 0.1
local macroed = falsewd
notifis = true
Cframeamountlol = 1
local isaiming = false
local macroedtoggle = false
local cfspeedtoggled = falsewd
local macrokey = Enum.KeyCode.V
local autopeekmarker = Instance.new("Part", game.Workspace)
autopeekmarker.Anchored = true
autopeekmarker.CanCollide = false
autopeekmarker.Size = Vector3.new(0.5, 0.5, 0.5)
autopeekmarker.Material = "Glass" 
autopeekmarker.Color = Color3.fromRGB(255,0,0)
autopeekmarker.Shape = Enum.PartType.Ball
autopeekmarker.Transparency = 0.7
showvelo = false
local Service = setmetatable({}, {
__index = function(t, k)
    return game:GetService(k)
end
})


local WS = workspace
local Insert = table.insert
local Remove = table.remove
local Find = table.find
local Players = Service.Players
local LocalPlayer = Players.LocalPlayer
local oldhip = LocalPlayer.Character.Humanoid.HipHeight
local CurrentCamera = WS.CurrentCamera
local Blur = Instance.new("BlurEffect", CurrentCamera)
Blur.Size = 0
local WorldToViewPortPoint = CurrentCamera.WorldToViewportPoint
local Mouse = LocalPlayer:GetMouse()
local RunService = Service.RunService
local GuiInset = Service.GuiService:GetGuiInset()
local ReplicatedStorage = Service.ReplicatedStorage
local UserInputService = Service.UserInputService
local KeyCode = Enum.KeyCode
local InputType = Enum.UserInputType
local Material = Enum.Material

local StarterGui = Service.StarterGui

local Module = {
Instance = {},
Players = {},
DrawingInstance = {},
OldCFrame,
Ignores = {
    "UpperTorso",
    "LowerTorso",
    "Head",
    "LeftHand",
    "LeftUpperArm",
    "LeftLowerArm",
    "RightHand",
    "RightUpperArm",
    "RightLowerArm"
},
BodyParts = {
    "Head",
    "Torso",
    "HumanoidRootPart",
    "Left Arm",
    "Right Arm",
    "Left Leg",
    "Right Leg"
},
Functions = {
    Network = function(Data)
        if Data and Data.Character and Data.Character:FindFirstChild("HumanoidRootPart") ~= nil and Data.Character:FindFirstChild("Humanoid") ~= nil and Data.Character:FindFirstChild("Head") ~= nil then
            return true
        end
        return false
    end,
    Cham = function(Data, State)
        local BoxVar = nil
        local GlowVar = nil
        if State then
            for _, v in pairs(Data.Character:GetChildren()) do
                if v:IsA("BasePart") and v.Transparency ~= 1 then
                    if not v:FindFirstChild("Box") then
                        BoxVar = Instance.new("BoxHandleAdornment", v)
                        BoxVar.Name = "Box"
                        BoxVar.AlwaysOnTop = true
                        BoxVar.ZIndex = 4
                        BoxVar.Adornee = v
                        BoxVar.Color3 = Color3.fromRGB(255, 20, 20)
                        BoxVar.Transparency = 0.5
                        BoxVar.Size = v.Size + Vector3.new(0.01, 0.01, 0.01)
                    end
                end
            end
        else
            for i, v in pairs(Data.Character:GetChildren()) do
                if v:IsA("BasePart") and v.Transparency ~= 1 then
                    if v:FindFirstChild("Box") then
                        v["Box"]:Destroy()
                    end
                end
            end
            
            return BoxVar, GlowVar
        end
    end
},
Drawing = {
    Circle = function(Thickness)
        local Circle = Drawing.new("Circle")
        Circle.Transparency = 1
        Circle.Thickness = Thickness
        return Circle
    end
},
}

Module.Functions.NoSpace = function(Data)
return Data:gsub("%s+", "") or Data
end

Module.Functions.Find = function(Data)
local Target = nil

for i, v in next, Players:GetPlayers() do
    if v.Name ~= LocalPlayer.Name and v.Name:lower():match('^'.. Module.Functions.NoSpace(Data):lower()) then
        Target = v.Name
    end
end

return Target
end

Module.Functions.PlayAnimation = function(Data, SpeedData, ActionData)
if Module.Functions.Network(LocalPlayer) then
    UniversalAnimation.AnimationId = "rbxassetid://" .. tostring(Data)
    local Track = LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(UniversalAnimation)
    if ActionData then
        Track.Priority = Enum.AnimationPriority.Action
    end
    if SpeedData ~= nil then
        Track:AdjustSpeed(SpeedData)
    end
    Track:Play()
end
end

Module.Functions.StopAnimation = function()
if Module.Functions.Network(LocalPlayer) then
    for _, v in next, LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):GetPlayingAnimationTracks() do
        if v.Animation.AnimationId:match("rbxassetid") then
            v:Stop()
        end
    end
end
end

Module.Functions.Underground = function(Data)
if Module.Functions.Network(LocalPlayer) then
    if Data then
        
        LocalPlayer.Character.Humanoid.HipHeight = -1
        Module.Functions.PlayAnimation(3152378852, nil, true)
    else
        LocalPlayer.Character.Humanoid.HipHeight = 2.1
        Module.Functions.StopAnimation()
    end
end
end

Module.Functions.AntiHead = function(State)
if Module.Functions.Network(LocalPlayer) then
    if State then
        Module.Functions.PlayAnimation(3189777795, 0.1, false)
    else
        Module.Functions.StopAnimation()
    end
end
end

Module.Functions.IsVisible = function(OriginPart, Part)
if Module.Functions.Network(LocalPlayer) then
    local IgnoreList = {CurrentCamera, LocalPlayer.Character, OriginPart.Parent}
    local Parts = CurrentCamera:GetPartsObscuringTarget(
        {
            OriginPart.Position, 
            Part.Position
        },
        IgnoreList
    )

    for i, v in pairs(Parts) do
        if v.Transparency >= 0.3 then
            Module.Instance[#Module.Instance + 1] = v
        end

        if v.Material == Enum.Material.Glass then
            Module.Instance[#Module.Instance + 1] = v
        end
    end

    return #Parts == 0
end
return true
end

Module.Functions.NilBody = function()
if Module.Functions.Network(LocalPlayer) then
    for i, v in pairs(LocalPlayer.Character:GetChildren()) do
        if v:IsA("BasePart") or v:IsA("Part") or v:IsA("MeshPart") then
            if v.Name ~= "HumanoidRootPart" then
                v:Destroy()
            end
        end
    end
end
end

Module.Functions.TableRemove = function(Data, Data2)
for i, v in pairs(Data) do
    if v == Data2 then
        Remove(Data, i)
    end
end
end

Module.Functions.GodFunc = function(Variable)
LocalPlayer.Character.RagdollConstraints:Destroy()
local Folder = Instance.new("Folder", LocalPlayer.Character)
Folder.Name = "FULLY_LOADED_CHAR"
wait()
StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, true)
Variable = false
end

Module.Functions.Init = function()
for _, v in next, Players:GetPlayers() do
    if v ~= LocalPlayer and v:IsFriendsWith(LocalPlayer.UserId) then
        Insert(Settings.Whitelist.Friends, v.Name)
    end
end

Players.PlayerAdded:Connect(function(_Player)
    if _Player ~= LocalPlayer and _Player:IsFriendsWith(LocalPlayer.UserId) then
        Insert(Settings.Whitelist.Friends, _Player.Name)
    end
end)

Players.PlayerRemoving:Connect(function(_Player)
    if _Player ~= LocalPlayer and _Player:IsFriendsWith(LocalPlayer.UserId) then
        Module.Functions.TableRemove(Settings.Whitelist.Friends, _Player.Name)
    end
end)

LocalPlayer.CharacterAdded:Connect(function()
    wait(0.5)
    Settings.God.IsStillAlive = false
    if LocalPlayer.Character:FindFirstChild("BodyEffects") then
        if Settings.God.GodBullet then
            Module.Functions.GodFunc(Settings.God.GodBullet)
            LocalPlayer.Character.BodyEffects.BreakingParts:Destroy()
        end
        if Settings.God.GodMelee then
            Module.Functions.GodFunc(Settings.God.GodMelee)
            Settings.God.IsStillAlive = true
            LocalPlayer.Character.BodyEffects.Armor:Destroy()
            LocalPlayer.Character.BodyEffects.Defense:Destroy()
        end
        if Settings.God.AntiRagdoll then
            Module.Functions.GodFunc(Settings.God.AntiRagdoll)
        end
    end
    wait(0.5)
    if Settings.AntiAim.Underground then
        Module.Functions.Underground(true)
    end
    wait(0.4)
    if Settings.AntiAim.UndergroundWallbang then
        Float = Instance.new("BodyVelocity")
        Float.Parent = LocalPlayer.Character.HumanoidRootPart
        Float.MaxForce = Vector3.new(100000, 100000, 100000)
        Float.Velocity = Vector3.new(0, 0, 0)
        wait(0.25)
        LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, -11.5, 0)
        Module.Functions.Cham(LocalPlayer, true)
        Settings.AntiAim.UndergroundWallbang = true
    end
end)
end

Module.Functions.NearestMouse = function()
local Target = nil
local Distance = math.huge

for _, v in next, Players:GetPlayers() do
    if Module.Functions.Network(v) and v ~= LocalPlayer then
        local RootPosition, RootVisible = WorldToViewPortPoint(CurrentCamera, v.Character.HumanoidRootPart.Position)
        local NearestToMouse = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(RootPosition.X, RootPosition.Y)).magnitude
        if RootVisible and Distance > NearestToMouse then
            if (not Settings.Whitelist.FriendsWhitelist or not Find(Settings.Whitelist.Friends, v.Name)) and (not Settings.Whitelist.CrewEnabled or v:FindFirstChild("DataFolder") and v.DataFolder.Information:FindFirstChild("Crew") and not tonumber(v.DataFolder.Information.Crew.Value) == tonumber(LocalPlayer.DataFolder.Information.Crew.Value)) and (not Settings.Whitelist.Enabled or not Find(Settings.Whitelist.Players, v.Name)) then
                Target = v
                Distance = NearestToMouse
            end
        end
    end
end

return Target, Distance
end

Module.Functions.NearestRoot = function()
local Target = nil
local Distance = math.huge

for _, v in next, Players:GetPlayers() do
    if Module.Functions.Network(v) and Module.Functions.Network(LocalPlayer) and v ~= LocalPlayer then
        local NearestToRoot = (LocalPlayer.Character.HumanoidRootPart.Position - v.Character.HumanoidRootPart.Position).magnitude
        if Distance > NearestToRoot then
            if (not Settings.Whitelist.FriendsWhitelist or not Find(Settings.Whitelist.Friends, v.Name)) and (not Settings.Whitelist.CrewEnabled or v:FindFirstChild("DataFolder") and v.DataFolder.Information:FindFirstChild("Crew") and not tonumber(v.DataFolder.Information.Crew.Value) == tonumber(LocalPlayer.DataFolder.Information.Crew.Value)) and (not Settings.Whitelist.Enabled or not Find(Settings.Whitelist.Players, v.Name)) then
                Target = v
                Distance = NearestToRoot
            end
        end
    end
end

return Target, Distance
end

Module.Functions.TargetCheck = function(Data)
if Data == "Mouse" then
    return Module.Functions.NearestMouse()
elseif Data == "Distance" then
    return Module.Functions.NearestRoot()
end
end

Module.Functions.Invisible = function()
if Module.Functions.Network(LocalPlayer) then
    Module.OldCFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
    wait(0.1)
    LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(0, 96995694596945934234234234, 0)
    wait(0.1)
    LocalPlayer.Character.LowerTorso.Root:Destroy()
    for _, v in pairs(LocalPlayer.Character:GetChildren()) do
        if v:IsA("MeshPart") and not table.find(Module.Ignores, v.Name) then
            v:Destroy()
        end
    end
    wait(0.1)
    LocalPlayer.Character.HumanoidRootPart.CFrame = Module.OldCFrame
end
end

Module.Functions.Jitter = function(Speed, Angle)
if Module.Functions.Network(LocalPlayer) then
    local Jit = Speed or math.random(30, 90)
    LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(LocalPlayer.Character.HumanoidRootPart.CFrame.Position) * CFrame.Angles(0, math.rad(Angle) + math.rad((math.random(1, 2) == 1 and Jit or -Jit)), 0) 
end
end

Module.Functions.Spin = function(Speed)
if Module.Functions.Network(LocalPlayer) then
    LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(Speed), 0)
end
end

Module.Functions.HttpGet = function(Data)
return loadstring(game:HttpGet(Data))()
end

function RandomTable(Table)
    local Values = 0
    for i, v in pairs(Table) do
        Values = i
    end
    
    return Table[math.random(1, Values)]
end

local NotifyLibrary = Module.Functions.HttpGet("https://raw.githubusercontent.com/turbostain/gavnozalupa/main/akalifnotify")
local Notify = NotifyLibrary.Notify
Module.Functions.Init()

local library = loadstring(game:HttpGet("https://pastebin.com/raw/sAxXgZpw"))({cheatname = "immamantium", gamename = 'main'});
library:init();
local utility = library.utility;
local signal = library.signal;

local menu = library.NewWindow({title = library.cheatname.." - "..library.gamename, size = UDim2.new(0, 490, 0, 550)})
library:CreateSettingsTab(menu)
local aimtab = menu:AddTab("Aiming")
local espsection = aimtab:AddSection('Bullet Prioritise', 1)

local Aimingtoggle = espsection:AddToggle({text = 'Enabled', flag = 'silentenabled', callback = function(bool)
Settings.SilentAim.Enabled = bool
end})
Aimingtoggle:AddBind({text = 'Aiming', flag = 'silentmind', nomouse = true, noindicator = false,mode = "toggle",callback = function(sus)
isaiming = sus
end})
espsection:AddToggle({text = 'Visible Check', flag = 'vischeck', callback = function(bool)
Settings.SilentAim.VisibleCheck = bool
end})
local resolving = false
local espsection2 = aimtab:AddSection('Aiming Settings', 2)
espsection2:AddToggle({text = 'Resolver', flag = 'autopred', callback = function(bool)
resolverenabled = bool
end}):AddBind({text = 'Resolving', flag = 'resolverbind', nomouse = true, mode = "toggle",noindicator = false,callback = function(a)
resolving = a
end})
espsection2:AddSlider({text = 'Resolver Prediction', flag = 'resolderpred', min = 0, max = 0.5, increment = .01, value = 0.165, callback = function(sus)
resolverpred = sus
end})
  espsection2:AddList({text = 'Freefall Hitbox', flag = 'freefallhitbox', selected = 'Head', values = {"HumanoidRootPart","Head","LowerTorso","UpperTorso"}, callback = function(val)
        freefallhitbox = val
    end})
  espsection2:AddList({text = 'Hitboxes', flag = 'mainhitobx', multi = true,selected = 'HumanoidRootPart', values = {"HumanoidRootPart","Head","LowerTorso","UpperTorso"}, callback = function(val)
        Settings.SilentAim.Hitbox = val
    end})

local espsection3 = aimtab:AddSection('Bullet Prioritise Visuals', 1)
espsection3:AddToggle({text = 'Draw Fov', flag = 'drawfov', callback = function(bool)
Settings.SilentAim.FOV.Enabled = bool
end})
espsection3:AddToggle({text = 'Filled', flag = 'fovfilled', callback = function(bool)
Settings.SilentAim.FOV.Filled = bool
end})

espsection3:AddSlider({text = 'Size', flag = 'fovsize', min = 1, max = 1000, increment = 1, value = 100, callback = function(sus)
Settings.SilentAim.FOV.Size = sus
end})
espsection3:AddSlider({text = 'Transparency', flag = 'fovtrans', min = 0, max = 1, increment = .01, value = 0.5, callback = function(sus)
Settings.SilentAim.FOV.Transparency = sus
end})

local espsection4 = aimtab:AddSection('Legit', 1)
local aimassisttoggle = espsection4:AddToggle({text = 'Aim Assist', flag = 'aimassist', callback = function(bool)
aimssist = bool
end})
aimassisttoggle:AddBind({text = 'Aim Assist', flag = 'assistbind', nomouse = true, noindicator = true,callback = function()
    if aimssist and enabled2 then
        Plr = nil
     enabled2 = false
     
if notifi == true  then
Notify({
                     Title = "immamantium";
                     Description = "None",
                     Duration = 3
 })
end
 else
     if aimssist then
     enabled2 = true
     if Module.Functions.IsVisible(Module.Functions.TargetCheck(Settings.SilentAim.Nearest).Character.HumanoidRootPart, LocalPlayer.Character.HumanoidRootPart) then
         Plr = Module.Functions.TargetCheck(Settings.SilentAim.Nearest).Name
          if notifi == true  then
         Notify({
             Title = "immamantium",
             Description = "" ..Module.Functions.TargetCheck(Settings.SilentAim.Nearest).DisplayName,
             Duration = 3
         })
    
     end
     end
     end
end
end})
local smoothness = 5
espsection4:AddSlider({text = 'Smoothness', flag = 'Smoothness', min = 1.5, max = 80, increment = .01, value = 5, callback = function(sus)
smoothness = sus
end})
espsection4:AddBind({text = 'Macro', flag = 'macrokeybind', nomouse = true, mode = "toggle",noindicator = false, callback = function(sus)
SpeedGlitch = sus
	
repeat game:GetService("RunService").Heartbeat:wait()
							keypress(0x49)
							game:GetService("RunService").Heartbeat:wait()
							keypress(0x4F)
							game:GetService("RunService").Heartbeat:wait()
							keyrelease(0x49)
							game:GetService("RunService").Heartbeat:wait()
							keyrelease(0x4F)
							game:GetService("RunService").Heartbeat:wait()
until SpeedGlitch == false
					
end})
local ragetab = menu:AddTab("Rage")
local ragesec = ragetab:AddSection('Target Aim', 1)
local targettogle = ragesec:AddToggle({text = 'Enabled', flag = 'targetaim', callback = function(bool)
Settings.Target.Enabled = bool
end})
targettogle:AddBind({text = 'Target Aim', flag = 'targetbind', nomouse = true, noindicator = true,callback = function()

    if Settings.Target.Enabled and enabled then
        Settings.Target.TargetUser = nil
     enabled = false
     
if notifi == true  then
Notify({
                     Title = "immamantium";
                     Description = "None",
                     Duration = 3
 })

end
 else
     if Settings.Target.Enabled then
     enabled = true
     if Module.Functions.IsVisible(Module.Functions.TargetCheck(Settings.SilentAim.Nearest).Character.HumanoidRootPart, LocalPlayer.Character.HumanoidRootPart) then
         Settings.Target.TargetUser = Module.Functions.TargetCheck(Settings.SilentAim.Nearest).Name
          if notifi == true  then
         Notify({
             Title = "immamantium",
             Description = "" ..Module.Functions.TargetCheck(Settings.SilentAim.Nearest).DisplayName,
             Duration = 3
         })
   
     end
     end
     end
end
end})
ragesec:AddToggle({text = 'Part Mode', flag = 'partmod', callback = function(bool)
targetchams = bool
end})
ragesec:AddSeparator({text = 'Target Strafe'})
ragesec:AddToggle({text = 'Enabled', flag = 'targetstraf', callback = function(bool)
TargetStrafe = bool
end})
ragesec:AddSlider({text = 'Speed', flag = 'targetspeed', min = 50, max = 800, increment = 1, value = 500, callback = function(sus)
Targetspeed = sus * 400
end})
ragesec:AddSlider({text = 'Distance', flag = 'targetdis', min = 1, max = 15, increment = 1, value = 5, callback = function(sus)
Targetdis = sus
end})




RunService.RenderStepped:Connect(function()
        if aimssist  then
        if Plr ~= nil then
            local Vector = CurrentCamera:WorldToScreenPoint((Players[Plr].Character.UpperTorso.Position +
            Players[Plr].Character.HumanoidRootPart.RotVelocity * prediction2))
        mousemoverel((Vector.X - Mouse.X) / smoothness, (Vector.Y - Mouse.Y) / smoothness)
        end
        end
end)
sss2 = true
local ragesec = ragetab:AddSection('Toggles', 2)
ragesec:AddToggle({text = 'Anti Bag', flag = 'antibag', callback = function(bool)
antibag = bool
end})
ragesec:AddToggle({text = 'Anti Stomp', flag = 'antistomp', callback = function(bool)
antistomp = bool
end})
local antifling = false

local ragesec2 = ragetab:AddSection('Movement', 2)
local cframetoggled = false
local cframetoggle = ragesec2:AddToggle({text = 'CFrame Speed', flag = 'cframekey', callback = function(bool)
Settings.Movement.CFrameSpeed = bool
end})
cframetoggle:AddBind({text = 'CFrame Speed', flag = 'cframespeed', nomouse = true, noindicator = false,callback = function(a)
        cframetoggled = a
end})
ragesec2:AddSlider({text = 'Amount', flag = 'cframeamount', min = 0, max = 1000, increment = 1, value = 100, callback = function(sus)
Cframeamountlol = tonumber(sus)/100
end})
ragesec2:AddList({text = 'Method', flag = 'cframemethod', selected = 'Render', values = {"Render", "Heartbeat"}, callback = function(val)
Settings.Movement.Type = val
end})
ragesec2:AddToggle({text = 'Strafes', flag = 'strafejump', callback = function(bool)
strafejump = bool
end})
ragesec2:AddToggle({text = 'Visualize Self Velocity', flag = 'selfvelo', callback = function(bool)
showvelo = bool
end})


local autopeekmarker2 = Instance.new("Part", game.Workspace)
autopeekmarker2.Anchored = true
autopeekmarker2.CanCollide = false
autopeekmarker2.Size = Vector3.new(0.5, 0.5, 0.5)
local ragesec3 = ragetab:AddSection('Auto Peek', 1)
ragesec3:AddToggle({text = 'Enabled', flag = 'autopeek', callback = function(suck)
AUTOPEEK = suck
if suck then
    autopeekmarker2.Transparency = 0.3
else 
    autopeekmarker2.Transparency = 1
end
        plr = game:GetService('Players').LocalPlayer
	X1 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.X
	Y1 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Y
	Z1 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Z
      autopeekmarker2.CFrame = CFrame.new(X1,Y1,Z1) 
end})
ragesec3:AddBind({text = 'Save Position', flag = 'savepos', nomouse = true, noindicator = false, callback = function()
  if AUTOPEEK then
        plr = game:GetService('Players').LocalPlayer
	X1 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.X
	Y1 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Y
	Z1 = plr.Character:FindFirstChild('HumanoidRootPart').CFrame.Z
      autopeekmarker2.CFrame = CFrame.new(X1,Y1,Z1) 
    end
end})
ragesec3:AddBind({text = 'Load Position', flag = 'loadpos', nomouse = true, noindicator = false,callback = function()
  if AUTOPEEK then
      if AUTOPEEK then
        plr = game:GetService('Players').LocalPlayer
	plr.Character.HumanoidRootPart.CFrame = CFrame.new(X1,Y1,Z1)
    end
    end
end})
local ragesec4 = ragetab:AddSection('For Friends', 1)



ragesec4:AddButton({text = 'God Block', flag = 'godblock', callback = function()	
pcall(function()
    game.Players.LocalPlayer.Character.BodyEffects.Defense.CurrentTimeBlock:Destroy()
end)
end})
ragesec4:AddToggle({text = 'Better Package', flag = 'betterpack', callback = function(bool)
packed = bool
end})


local MapLightingJmp = Instance.new("ColorCorrectionEffect")
MapLightingJmp.Parent = game:GetService("Lighting")
MapLightingJmp.Enabled = false
MapLightingJmp.Contrast = 0
local visualstab = menu:AddTab("Visuals")
local espseciton = visualstab:AddSection('World', 1)
espseciton:AddToggle({text = 'Contrast', flag = 'contrast1', callback = function(bool)
MapLightingJmp.Enabled = bool
end}):AddSlider({flag = 'contrast2', min = 0, max = 3, increment = .01, value = 0, callback = function(sus)
MapLightingJmp.Contrast = sus
end})

local MapLightingJmp2 = Instance.new("ColorCorrectionEffect")
MapLightingJmp2.Parent = game:GetService("Lighting")
MapLightingJmp2.Enabled = false
MapLightingJmp2.Saturation = 0
espseciton:AddToggle({text = 'Saturation', flag = 'saturation1', callback = function(bool)
MapLightingJmp2.Enabled = bool
end}):AddSlider({flag = 'saturation', min = 0, max = 3, increment = .01, value = 0, callback = function(sus)
MapLightingJmp2.Saturation = sus
end})
espseciton:AddToggle({text = 'Time Changer', flag = 'time1', callback = function(bool)
timechanger = bool
end}):AddSlider({flag = 'time2', min = 0, max = 24, increment = .01, value = 10, callback = function(sus)
timeamount = sus
end})

local espse = visualstab:AddSection('Client', 2)
espse:AddToggle({text = 'Hide User', flag = 'hideuser', callback = function(bool)
hideuser = bool
end})
espse:AddToggle({text = 'Hide Crew Frame', flag = 'hidecrew', callback = function(bool)
removebar = bool
end})
espse:AddToggle({text = 'Hide Leaderboard', flag = 'hideleader', callback = function(bool)
removeleaderboard = bool
end})
local Misctab = menu:AddTab("Miscellaneous")
local miscreset = Misctab:AddSection('Closets', 1)
miscreset:AddBind({text = 'Anti Fling', flag = 'antiflingkey', nomouse = true, noindicator = false, callback = function(a)
game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = a
end})
local ragesec5 = Misctab:AddSection('Fake Macro', 2)
ragesec5:AddToggle({text = 'Enabled', flag = 'fakemacro', callback = function(bool)
fakemacro = bool
end}):AddBind({text = 'Macro', flag = 'Macrotoggle', nomouse = true, noindicator = false, mode = "hold",callback = function(a)
fakemacroed = a
end})
ragesec5:AddSlider({text = 'Amount', flag = 'vectoramount', min = 0, max = 400, increment = 1, value = 100, callback = function(sus)
macroamount = sus
end})
ragesec5:AddSlider({text = 'Jitter Angle', flag = 'jitterangle', min = 0, max = 100, increment = 1, value = 45, callback = function(sus)
jitterammount = sus
end})
local __Index;
__Index = hookmetamethod(game, "__index", function(t, k)
if t == Mouse and (tostring(k) == "Hit" or tostring(k) == "Target") then
    if Settings.Target.Enabled  then
        if Settings.Target.TargetUser ~= nil then
            if Players:FindFirstChild(Settings.Target.TargetUser) ~= nil and Module.Functions.Network(Players[Settings.Target.TargetUser]) then
                if (not Settings.Target.WallCheck or Module.Functions.IsVisible(Players[Settings.Target.TargetUser].Character.HumanoidRootPart, LocalPlayer.Character.HumanoidRootPart)) then
                    local TargetBody
                    if Players[Settings.Target.TargetUser].Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and Settings.SilentAim.Mode == "Insane" then
                        TargetBody = Players[Settings.Target.TargetUser].Character[freefallhitbox]
                    else
                        TargetBody = Players[Settings.Target.TargetUser].Character[RandomTable(Settings.SilentAim.Hitbox)]
                    end
                     local Prediction 
                if resolverenabled and resolving then
                    Prediction = TargetBody.CFrame + (TargetBody.RotVelocity * resolverpred)
                else
                    Prediction = TargetBody.CFrame + (TargetBody.Velocity * Settings.Prediction_Settings.Prediction)
                end


                    return (tostring(k) == "Hit" and Prediction or tostring(k) == "Target" and TargetBody)
                end
            end
        end
    else
        if Settings.SilentAim.Enabled and isaiming then
            local NearestTarget, NearestPos = Module.Functions.TargetCheck(Settings.SilentAim.Nearest)
            if NearestTarget and (not Settings.SilentAim.VisibleCheck or Module.Functions.IsVisible(NearestTarget.Character.HumanoidRootPart, LocalPlayer.Character.HumanoidRootPart)) and (not Settings.SilentAim.FOV.Enabled or Settings.SilentAim.FOV.Size > NearestPos) then
                local TargetBody
                if NearestTarget.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and Settings.SilentAim.Mode == "Insane" then
                    TargetBody = NearestTarget.Character[freefallhitbox]
                else
                    TargetBody = NearestTarget.Character[RandomTable(Settings.SilentAim.Hitbox)]
                end

                  local Prediction 
                if resolverenabled and resolving then
                    Prediction = TargetBody.CFrame + (TargetBody.RotVelocity * resolverpred)
                else
                    Prediction = TargetBody.CFrame + (TargetBody.Velocity * Settings.Prediction_Settings.Prediction)
                end

                return (tostring(k) == "Hit" and Prediction or tostring(k) == "Target" and TargetBody)
            end
        end
    end
end

return __Index(t, k)
end)

local __Namecall;
__Namecall = hookmetamethod(game, "__namecall", function(self, ...)
local Args = {...}
local Method = getnamecallmethod()

if tostring(self.Name) == "MainEvent" and tostring(Method) == "FireServer" then
    if Args[1] == "TeleportDetect" or Args[1] == "CHECKER_1" or Args[1] == "OneMoreTime" then
        return
    end
end

return __Namecall(self, ...)
end)

if not Module.DrawingInstance["FOV"] then
Module.DrawingInstance["FOV"] = Module.Drawing.Circle(1)
end

if not Module.DrawingInstance["FOV2"] then
Module.DrawingInstance["FOV2"] = Module.Drawing.Circle(1)
end

RunService.RenderStepped:Connect(function()
   if Settings.Prediction_Settings.AutoSettings then
    local PingStats = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
    local Value = tostring(PingStats)
    local PingValue = Value:split(" ")
    local PingNumber = tonumber(PingValue[1])

        Settings.Prediction_Settings.Prediction = PingNumber / 1000 + 0.037
end
if strafejump then
 
    
        if LocalPlayer.Character.Humanoid.MoveDirection.Magnitude > 0 and
            LocalPlayer.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall
        then
            LocalPlayer.Character:TranslateBy(LocalPlayer.Character.Humanoid.MoveDirection * 0.1)
        end
end 
  if targetchams then
      if Settings.Target.Enabled  then
        if Settings.Target.TargetUser ~= nil then
             placemarker.CFrame = CFrame.new(Players[Settings.Target.TargetUser].Character.HumanoidRootPart.Position)
            else
            placemarker.CFrame = CFrame.new(0, 9999, 0)
        end
      end
      
end
    
        
	game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Top.Visible = topvis
	game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Bottom.Visible = downtvis
	game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Right.Visible = rightvis
	game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Left.Visible = leftvis
		game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.BackgroundColor3 = crosscolor
	game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Top.BackgroundColor3 = crosscolor
	game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Bottom.BackgroundColor3 = crosscolor
	game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Right.BackgroundColor3 = crosscolor
	game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Left.BackgroundColor3 = crosscolor
  
    if showvelo then
        autopeekmarker.CFrame = CFrame.new(LocalPlayer.Character.HumanoidRootPart.Position + (LocalPlayer.Character.HumanoidRootPart.Velocity * 0.11))
        else
        autopeekmarker.CFrame = CFrame.new(0,9999,0)
    end
    
if hideuser == true then
game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Leaderboard.PlayerScroll.TextLabel.Visible = false
end
if hideuser == false then
game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Leaderboard.PlayerScroll.TextLabel.Visible = true
end
if removebar == false then 
game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Crew.Visible = true
end
if removeleaderboard == true then
    game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Leaderboard.Visible = false
    end
if hideleader == true then
    game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Leaderboard.Visible = false
    end
if removebar == true then
game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Crew.Visible = false
end

    if timechanger then
    game.Lighting.ClockTime = timeamount
    end
    if TargetStrafe and Settings.Target.Enabled  and Settings.Target.TargetUser ~= nil then
           local incline = math.rad(0)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Players[Settings.Target.TargetUser].Character.HumanoidRootPart.CFrame * CFrame.fromEulerAnglesXYZ(incline, i * Targetspeed, 0) * CFrame.new(0, 0, Targetdis)
end


if Settings.Aimbot.Enabled and Settings.Aimbot.Aiming then
    local NearestTarget, NearestPos = Module.Functions.TargetCheck(Settings.Aimbot.Nearest)
    if NearestTarget and (not Settings.Aimbot.VisibleCheck or Module.Functions.IsVisible(NearestTarget.Character.HumanoidRootPart, LocalPlayer.Character.HumanoidRootPart)) and (not Settings.Aimbot.FOV.Enabled or Settings.Aimbot.FOV.Size > NearestPos) then
        local Prediction = NearestTarget.Character[Settings.SilentAim.Hitbox].CFrame + (NearestTarget.Character(Settings.SilentAim.Hitbox).Velocity * Settings.Prediction_Settings.Prediction)
        CurrentCamera.CFrame = CFrame.lookAt(CurrentCamera.CFrame.Position, Prediction.Position)
    end
end
if antistomp then
    if 6 > game.Players.LocalPlayer.Character.Humanoid.Health then
        for L_170_forvar0, L_171_forvar1 in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if L_171_forvar1:IsA("BasePart") then
            L_171_forvar1:Destroy()
        end
        end
end
end
if Settings.SilentAim.FOV.Enabled then
    Module.DrawingInstance["FOV"].Visible = true
    Module.DrawingInstance["FOV"].Radius = Settings.SilentAim.FOV.Size
    Module.DrawingInstance["FOV"].Transparency = Settings.SilentAim.FOV.Transparency
    Module.DrawingInstance["FOV"].Filled = Settings.SilentAim.FOV.Filled
    if Settings.SilentAim.FOV.Shape == "Custom" then
        Module.DrawingInstance["FOV"].NumSides = Settings.SilentAim.FOV.Round
    elseif Settings.SilentAim.FOV.Shape == "Octagon" then
        Module.DrawingInstance["FOV"].NumSides = 12.5
    else 
        Module.DrawingInstance["FOV"].NumSides = 100
    end
    Module.DrawingInstance["FOV"].Color = Settings.SilentAim.FOV.Color
    Module.DrawingInstance["FOV"].Position = Vector2.new(Mouse.X, Mouse.Y + GuiInset.Y)
else
    Module.DrawingInstance["FOV"].Visible = false
end

if Settings.Aimbot.FOV.Enabled then
    Module.DrawingInstance["FOV2"].Visible = true
    Module.DrawingInstance["FOV2"].Radius = Settings.Aimbot.FOV.Size
    Module.DrawingInstance["FOV2"].Transparency = Settings.Aimbot.FOV.Transparency
    Module.DrawingInstance["FOV2"].Filled = Settings.Aimbot.FOV.Filled
    if Settings.Aimbot.FOV.Shape == "Custom" then
        Module.DrawingInstance["FOV2"].NumSides = Settings.Aimbot.FOV.Round
    elseif Settings.Aimbot.FOV.Shape == "Octagon" then
        Module.DrawingInstance["FOV2"].NumSides = 12.5
    else 
        Module.DrawingInstance["FOV"].NumSides = 100
    end
    Module.DrawingInstance["FOV2"].Color = Settings.Aimbot.FOV.Color
    Module.DrawingInstance["FOV2"].Position = Vector2.new(Mouse.X, Mouse.Y + GuiInset.Y)
else
    Module.DrawingInstance["FOV2"].Visible = false
end

if Module.Functions.Network(LocalPlayer) then
    local Char = LocalPlayer.Character
    local Root = Char.HumanoidRootPart
    local Hum = Char.Humanoid

    if Settings.ServerCrash.Enabled then
        Hum:ChangeState(11)
    end

    if Settings.Movement.CFrameSpeed and cframetoggled then
        if Settings.Movement.Type == "Render" then
            if Hum.MoveDirection.Magnitude > 0 then
                 LocalPlayer.Character:TranslateBy(
                    LocalPlayer.Character.Humanoid.MoveDirection * Cframeamountlol
                )
            end
        end
    end
end
end)



RunService.Heartbeat:Connect(function()
  if antibag then
            if LocalPlayer.Character:FindFirstChild("Christmas_Sock") then
                LocalPlayer.Character:FindFirstChild("Christmas_Sock"):Destroy()
            end
        end
    if packed then
        if game:GetService("CorePackages"):FindFirstChild("Packages") then
        game:GetService("CorePackages").Packages:Destroy()
        end
end

if fakemacro and fakemacroed then
                LocalPlayer.Character.HumanoidRootPart.Velocity = CurrentCamera.CFrame.lookVector * macroamount
                       if macroangle == 1 then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(jitterammount), 0)
                    macroangle = 0
                     else
                    LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(-jitterammount), 0)
                    macroangle = 1
                end
end
                
  if AntiAim2 and pitch == "Sky" then
      
        game.Players.LocalPlayer.Character.Humanoid.HipHeight = VELOHIp
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0,CFRAMEE,0)
        LocalPlayer.Character.Humanoid:ChangeState(11)
  end
      if AntiAim2  and pitch == "Underground" then
      local oldVelocity = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
    game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(oldVelocity.X, -35, oldVelocity.Z)
    game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(oldVelocity.X, oldVelocity.Y, oldVelocity.Z)
    game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(oldVelocity.X, -35, oldVelocity.Z)
    game.Players.LocalPlayer.Character.Humanoid.HipHeight = 2.80
        LocalPlayer.Character.Humanoid:ChangeState(11)
      end
    if AntiAim2 == false then
        game.Players.LocalPlayer.Character.Humanoid.HipHeight = oldhip
             LocalPlayer.Character.Humanoid:ChangeState(18)
             end
if Module.Functions.Network(LocalPlayer) then
    local Char = LocalPlayer.Character
    local Root = Char.HumanoidRootPart
    local Hum = Char.Humanoid

    if Settings.Movement.CFrameSpeed and cframetoggled then
        if Settings.Movement.Type == "Heartbeat" then
            if Hum.MoveDirection.Magnitude > 0 then
                 LocalPlayer.Character:TranslateBy(
                    LocalPlayer.Character.Humanoid.MoveDirection * Cframeamountlol
                )
            end
        end
    end

end
end)
game:GetService("RunService").Heartbeat:Connect(
    function()
        if AntiAim1 then
            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity =
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.lookVector * -250
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(-555), 0)
        end
         if Antilock and antilocktoggled then
      game.Players.LocalPlayer.Character:TranslateBy(
                    game.Players.LocalPlayer.Character.Humanoid.MoveDirection * antimul
                )
         end
     
        if velocitybreaker then
                   game.Players.LocalPlayer.Character.Head.CanCollide = false
        game.Players.LocalPlayer.Character.UpperTorso.CanCollide = false
        game.Players.LocalPlayer.Character.LowerTorso.CanCollide = false
        game.Players.LocalPlayer.Character.HumanoidRootPart.CanCollide = false
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame *
            CFrame.new(math.random(0.00001, 1) == 1 and 2 or -2, 0, 0)
            
       end
    end
)

    spawn(function()
repeat
wait()
i = i + 0.00001
until TargetStrafe == nil
end) 
















































































































